
------------------------------------------------------------

Match - 6 instances

../checkbox.io/server-side/site/routes/admin.js:18,24
var MongoClient = mongo.MongoClient;
var db = null;
MongoClient.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASSWORD + "@" + process.env.MONGO_IP + ":27017/site?authSource=admin", function(err, authdb) {
    // Now you can use the database in the db variable
    db = authdb;
    console.log(err || "connected!");
});

../checkbox.io/server-side/site/routes/create.js:11,17
var MongoClient = mongo.MongoClient;
var db = null;
MongoClient.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASSWORD + "@" + process.env.MONGO_IP + ":27017/site?authSource=admin", function(err, authdb) {
    // Now you can use the database in the db variable
    db = authdb;
    console.log(err || "connected!");
});

../checkbox.io/server-side/site/routes/designer.js:16,22
var MongoClient = mongo.MongoClient;
var db = null;
MongoClient.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASSWORD + "@" + process.env.MONGO_IP + ":27017/site?authSource=admin", function(err, authdb) {
    // Now you can use the database in the db variable
    db = authdb;
    console.log(err || "connected!");
});

../checkbox.io/server-side/site/routes/live.js:9,15
var MongoClient = mongo.MongoClient;
var db = null;
MongoClient.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASSWORD + "@" + process.env.MONGO_IP + ":27017/site?authSource=admin", function(err, authdb) {
    // Now you can use the database in the db variable
    db = authdb;
    console.log(err || "connected!");
});

../checkbox.io/server-side/site/routes/study.js:11,17
var MongoClient = mongo.MongoClient;
var db = null;
MongoClient.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASSWORD + "@" + process.env.MONGO_IP + ":27017/site?authSource=admin", function(err, authdb) {
    // Now you can use the database in the db variable
    db = authdb;
    console.log(err || "connected!");
});

../checkbox.io/server-side/site/routes/upload.js:16,22
var MongoClient = mongo.MongoClient;
var db = null;
MongoClient.connect("mongodb://" + process.env.MONGO_USER + ":" + process.env.MONGO_PASSWORD + "@" + process.env.MONGO_IP + ":27017/site?authSource=admin", function(err, authdb) {
    // Now you can use the database in the db variable
    db = authdb;
    console.log(err || "connected!");
});

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/admin.js:38,48
exports.openStudy = function(req, res) {
    var token = req.body.token;
    db.collection('studies', function(err, collection) {
        collection.findOne({
            'token': token
        }, function(err, study) {
            collection.update({
                '_id': study._id
            }, {
                '$set': {
                    'status': 'open'

../checkbox.io/server-side/site/routes/admin.js:58,68
exports.closeStudy = function(req, res) {
    var token = req.body.token;
    db.collection('studies', function(err, collection) {
        collection.findOne({
            'token': token
        }, function(err, study) {
            collection.update({
                '_id': study._id
            }, {
                '$set': {
                    'status': 'closed'

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/designer.js:130,141
exports.openSurvey = function(req, res) {
    var token = req.body.token;
    db.collection('surveys', function(err, collection) {
        collection.findOne({
            'token': token
        }, function(err, survey) {

            collection.update({
                '_id': survey._id
            }, {
                '$set': {
                    'status': 'open'

../checkbox.io/server-side/site/routes/designer.js:153,164
exports.closeSurvey = function(req, res) {
    var token = req.body.token;
    db.collection('surveys', function(err, collection) {
        collection.findOne({
            'token': token
        }, function(err, survey) {

            collection.update({
                '_id': survey._id
            }, {
                '$set': {
                    'status': 'closed'

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/admin.js:78,87
exports.download = function(req, res) {
    var token = req.params.token;
    console.log(token);

    // get surveyId, then votes matching that.
    db.collection('studies', function(err, studyCollection) {
        studyCollection.findOne({
            'token': token
        }, function(err, study) {
            if (study && study.studyKind == "survey") {

../checkbox.io/server-side/site/routes/admin.js:159,168
exports.assignWinner = function(req, res) {
    var token = req.params.token;
    console.log(token);

    // get surveyId, then votes matching that.
    db.collection('studies', function(err, studyCollection) {
        studyCollection.findOne({
            'token': token
        }, function(err, study) {
            if (study) {

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/live.js:65,80
exports.download = function(req, res) {
    var token = req.params.token;
    console.log(token);

    // get surveyId, then votes matching that.
    db.collection('surveys', function(err, surveyCollection) {
        surveyCollection.findOne({
            'token': token
        }, function(err, survey) {
            if (survey) {
                db.collection('votes', function(err, voteCollection) {
                    //voteCollection.find({'survey.$id':survey._id}).toArray(function(err, items) {
                    voteCollection.find({
                        'surveyId': survey._id
                    }).toArray(function(err, items) {
                        console.log(err);

../checkbox.io/server-side/site/routes/live.js:135,154
exports.pickParticipant = function(req, res) {
    var token = req.params.token;
    console.log(token);

    // get surveyId, then votes matching that.
    db.collection('surveys', function(err, surveyCollection) {
        surveyCollection.findOne({
            'token': token
        }, function(err, survey) {
            if (survey) {
                // broken?
                //var results = db.executeDbCommand ( { distinct: "votes", key: "email" } );
                // , {'survey.$id':survey._id} 

                db.collection('votes', function(err, voteCollection) {
                    voteCollection.find({
                        'surveyId': survey._id
                    }).toArray(function(err, items) {
                        //voteCollection.find({'survey.$id': survey._id }).toArray(function(err, items) {
                        console.log(err);

------------------------------------------------------------

Match - 3 instances

../checkbox.io/public_html/scripts/async.js:205,219
        return fn.apply(null, [async.eachSeries].concat(args));
    };
};


var _asyncMap = function(eachfn, arr, iterator, callback) {
    var results = [];
    arr = _map(arr, function(x, i) {
        return {
            index: i,
            value: x
        };
    });
    eachfn(arr, function(x, callback) {
        iterator(x.value, function(err, v) {

../checkbox.io/public_html/scripts/async.js:261,272
async.foldr = async.reduceRight;

var _filter = function(eachfn, arr, iterator, callback) {
    var results = [];
    arr = _map(arr, function(x, i) {
        return {
            index: i,
            value: x
        };
    });
    eachfn(arr, function(x, callback) {
        iterator(x.value, function(v) {

../checkbox.io/public_html/scripts/async.js:290,301
async.selectSeries = async.filterSeries;

var _reject = function(eachfn, arr, iterator, callback) {
    var results = [];
    arr = _map(arr, function(x, i) {
        return {
            index: i,
            value: x
        };
    });
    eachfn(arr, function(x, callback) {
        iterator(x.value, function(v) {

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/live.js:205,218
console.log('Adding vote: ' + vote);

db.collection('votes', function(err, collection) {
    collection.insert(vote, {
        safe: true
    }, function(err, result) {
        if (err) {
            res.send({
                'error': 'An error has occurred'
            });
        } else {
            console.log('Success: ' + JSON.stringify(result[0]));
            res.send({
                'survey_url': '/surveys/?id=' + surveyId,

../checkbox.io/server-side/site/routes/study.js:188,201
console.log('Adding vote: ' + vote);

db.collection('votes', function(err, collection) {
    collection.insert(vote, {
        safe: true
    }, function(err, result) {
        if (err) {
            res.send({
                'error': 'An error has occurred'
            });
        } else {
            console.log('Success: ' + JSON.stringify(result[0]));
            res.send({
                'done': true

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/codegrams/task/scripts/view.js:1,11
$(document).ready(function() {
    $("#btn").click(function() {
        $.ajax({
            url: 'http://checkbox.io/api/snippets',
            success: function(snippets) {
                $.each(snippets, function() {
                    $("<li>").text(this.Message + " by " + this.Author).appendTo("#loadsnippets");
                });
            },
            error: function(xhr, status, err) {
                console.log(status + ":" + err);

../checkbox.io/public_html/studies/snippets/scripts/view.js:1,11
$(document).ready(function() {
    $("#btn").click(function() {
        $.ajax({
            url: 'http://checkbox.io/api/snippets',
            success: function(snippets) {
                $.each(snippets, function() {
                    $("<li>").text(this.Message + " by " + this.Author).appendTo("#loadsnippets");
                });
            },
            error: function(xhr, status, err) {
                console.log(status + ":" + err);

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/Markdown.Converter.js:607,619
if (url == "") {
    if (link_id == "") {
        // lower-case and turn embedded newlines into spaces
        link_id = link_text.toLowerCase().replace(/ ?\n/g, " ");
    }
    url = "#" + link_id;

    if (g_urls.get(link_id) != undefined) {
        url = g_urls.get(link_id);
        if (g_titles.get(link_id) != undefined) {
            title = g_titles.get(link_id);
        }
    } else {

../checkbox.io/public_html/scripts/Markdown.Converter.js:717,729
if (url == "") {
    if (link_id == "") {
        // lower-case and turn embedded newlines into spaces
        link_id = alt_text.toLowerCase().replace(/ ?\n/g, " ");
    }
    url = "#" + link_id;

    if (g_urls.get(link_id) != undefined) {
        url = g_urls.get(link_id);
        if (g_titles.get(link_id) != undefined) {
            title = g_titles.get(link_id);
        }
    } else {

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/async.js:501,532
var _parallel = function(eachfn, tasks, callback) {
    callback = callback || function() {};
    if (tasks.constructor === Array) {
        eachfn.map(tasks, function(fn, callback) {
            if (fn) {
                fn(function(err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    callback.call(null, err, args);
                });
            }
        }, callback);
    } else {
        var results = {};
        eachfn.each(_keys(tasks), function(k, callback) {
            tasks[k](function(err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                results[k] = args;
                callback(err);
            });
        }, function(err) {
            callback(err, results);
        });
    }
};

async.parallel = function(tasks, callback) {

../checkbox.io/public_html/scripts/async.js:546,577
async.series = function(tasks, callback) {
    callback = callback || function() {};
    if (tasks.constructor === Array) {
        async.mapSeries(tasks, function(fn, callback) {
            if (fn) {
                fn(function(err) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    if (args.length <= 1) {
                        args = args[0];
                    }
                    callback.call(null, err, args);
                });
            }
        }, callback);
    } else {
        var results = {};
        async.eachSeries(_keys(tasks), function(k, callback) {
            tasks[k](function(err) {
                var args = Array.prototype.slice.call(arguments, 1);
                if (args.length <= 1) {
                    args = args[0];
                }
                results[k] = args;
                callback(err);
            });
        }, function(err) {
            callback(err, results);
        });
    }
};

async.iterator = function(tasks) {

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/markdown.js:749,752
var b = this.loop_re_over_block(re, block, function(m) {

    if (m[2] && m[2][0] == "<" && m[2][m[2].length - 1] == ">")
        m[2] = m[2].substring(1, m[2].length - 1);

../checkbox.io/public_html/scripts/markdown.js:856,858
if (m) {
    if (m[2] && m[2][0] == "<" && m[2][m[2].length - 1] == ">")
        m[2] = m[2].substring(1, m[2].length - 1);

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/prettify.js:4,468
(function() {
    function S(a) {
        function d(e) {
            var b = e.charCodeAt(0);
            if (b !== 92) return b;
            var a = e.charAt(1);
            return (b = r[a]) ? b : "0" <= a && a <= "7" ? parseInt(e.substring(1), 8) : a === "u" || a === "x" ? parseInt(e.substring(2), 16) : e.charCodeAt(1)
        }

        function g(e) {
            if (e < 32) return (e < 16 ? "\\x0" : "\\x") + e.toString(16);
            e = String.fromCharCode(e);
            return e === "\\" || e === "-" || e === "]" || e === "^" ? "\\" + e : e
        }

        function b(e) {
            var b = e.substring(1, e.length - 1).match(/\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\[0-3][0-7]{0,2}|\\[0-7]{1,2}|\\[\S\s]|[^\\]/g),
                e = [],
                a =
                b[0] === "^",
                c = ["["];
            a && c.push("^");
            for (var a = a ? 1 : 0, f = b.length; a < f; ++a) {
                var h = b[a];
                if (/\\[bdsw]/i.test(h)) c.push(h);
                else {
                    var h = d(h),
                        l;
                    a + 2 < f && "-" === b[a + 1] ? (l = d(b[a + 2]), a += 2) : l = h;
                    e.push([h, l]);
                    l < 65 || h > 122 || (l < 65 || h > 90 || e.push([Math.max(65, h) | 32, Math.min(l, 90) | 32]), l < 97 || h > 122 || e.push([Math.max(97, h) & -33, Math.min(l, 122) & -33]))
                }
            }
            e.sort(function(e, a) {
                return e[0] - a[0] || a[1] - e[1]
            });
            b = [];
            f = [];
            for (a = 0; a < e.length; ++a) h = e[a], h[0] <= f[1] + 1 ? f[1] = Math.max(f[1], h[1]) : b.push(f = h);
            for (a = 0; a < b.length; ++a) h = b[a], c.push(g(h[0])),
                h[1] > h[0] && (h[1] + 1 > h[0] && c.push("-"), c.push(g(h[1])));
            c.push("]");
            return c.join("")
        }

        function s(e) {
            for (var a = e.source.match(/\[(?:[^\\\]]|\\[\S\s])*]|\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\\d+|\\[^\dux]|\(\?[!:=]|[()^]|[^()[\\^]+/g), c = a.length, d = [], f = 0, h = 0; f < c; ++f) {
                var l = a[f];
                l === "(" ? ++h : "\\" === l.charAt(0) && (l = +l.substring(1)) && (l <= h ? d[l] = -1 : a[f] = g(l))
            }
            for (f = 1; f < d.length; ++f) - 1 === d[f] && (d[f] = ++x);
            for (h = f = 0; f < c; ++f) l = a[f], l === "(" ? (++h, d[h] || (a[f] = "(?:")) : "\\" === l.charAt(0) && (l = +l.substring(1)) && l <= h &&
                (a[f] = "\\" + d[l]);
            for (f = 0; f < c; ++f) "^" === a[f] && "^" !== a[f + 1] && (a[f] = "");
            if (e.ignoreCase && m)
                for (f = 0; f < c; ++f) l = a[f], e = l.charAt(0), l.length >= 2 && e === "[" ? a[f] = b(l) : e !== "\\" && (a[f] = l.replace(/[A-Za-z]/g, function(a) {
                    a = a.charCodeAt(0);
                    return "[" + String.fromCharCode(a & -33, a | 32) + "]"
                }));
            return a.join("")
        }
        for (var x = 0, m = !1, j = !1, k = 0, c = a.length; k < c; ++k) {
            var i = a[k];
            if (i.ignoreCase) j = !0;
            else if (/[a-z]/i.test(i.source.replace(/\\u[\da-f]{4}|\\x[\da-f]{2}|\\[^UXux]/gi, ""))) {
                m = !0;
                j = !1;
                break
            }
        }
        for (var r = {
                b: 8,
                t: 9,
                n: 10,
                v: 11,
                f: 12,
                r: 13
            }, n = [], k = 0, c = a.length; k < c; ++k) {
            i = a[k];
            if (i.global || i.multiline) throw Error("" + i);
            n.push("(?:" + s(i) + ")")
        }
        return RegExp(n.join("|"), j ? "gi" : "g")
    }

    function T(a, d) {
        function g(a) {
            var c = a.nodeType;
            if (c == 1) {
                if (!b.test(a.className)) {
                    for (c = a.firstChild; c; c = c.nextSibling) g(c);
                    c = a.nodeName.toLowerCase();
                    if ("br" === c || "li" === c) s[j] = "\n", m[j << 1] = x++, m[j++ << 1 | 1] = a
                }
            } else if (c == 3 || c == 4) c = a.nodeValue, c.length && (c = d ? c.replace(/\r\n?/g, "\n") : c.replace(/[\t\n\r ]+/g, " "), s[j] = c, m[j << 1] = x, x += c.length, m[j++ << 1 | 1] =
                a)
        }
        var b = /(?:^|\s)nocode(?:\s|$)/,
            s = [],
            x = 0,

../checkbox.io/public_html/scripts/run_prettify.js:102,568
(function() {
    function j(a) {
        function d(f) {
            var b = f.charCodeAt(0);
            if (b !== 92) return b;
            var a = f.charAt(1);
            return (b = i[a]) ? b : "0" <= a && a <= "7" ? parseInt(f.substring(1), 8) : a === "u" || a === "x" ? parseInt(f.substring(2), 16) : f.charCodeAt(1)
        }

        function h(f) {
            if (f < 32) return (f < 16 ? "\\x0" : "\\x") + f.toString(16);
            f = String.fromCharCode(f);
            return f === "\\" || f === "-" || f === "]" || f === "^" ? "\\" + f :
                f
        }

        function b(f) {
            var b = f.substring(1, f.length - 1).match(/\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\[0-3][0-7]{0,2}|\\[0-7]{1,2}|\\[\S\s]|[^\\]/g),
                f = [],
                a = b[0] === "^",
                c = ["["];
            a && c.push("^");
            for (var a = a ? 1 : 0, g = b.length; a < g; ++a) {
                var k = b[a];
                if (/\\[bdsw]/i.test(k)) c.push(k);
                else {
                    var k = d(k),
                        o;
                    a + 2 < g && "-" === b[a + 1] ? (o = d(b[a + 2]), a += 2) : o = k;
                    f.push([k, o]);
                    o < 65 || k > 122 || (o < 65 || k > 90 || f.push([Math.max(65, k) | 32, Math.min(o, 90) | 32]), o < 97 || k > 122 || f.push([Math.max(97, k) & -33, Math.min(o, 122) & -33]))
                }
            }
            f.sort(function(f, a) {
                return f[0] -
                    a[0] || a[1] - f[1]
            });
            b = [];
            g = [];
            for (a = 0; a < f.length; ++a) k = f[a], k[0] <= g[1] + 1 ? g[1] = Math.max(g[1], k[1]) : b.push(g = k);
            for (a = 0; a < b.length; ++a) k = b[a], c.push(h(k[0])), k[1] > k[0] && (k[1] + 1 > k[0] && c.push("-"), c.push(h(k[1])));
            c.push("]");
            return c.join("")
        }

        function e(f) {
            for (var a = f.source.match(/\[(?:[^\\\]]|\\[\S\s])*]|\\u[\dA-Fa-f]{4}|\\x[\dA-Fa-f]{2}|\\\d+|\\[^\dux]|\(\?[!:=]|[()^]|[^()[\\^]+/g), c = a.length, d = [], g = 0, k = 0; g < c; ++g) {
                var o = a[g];
                o === "(" ? ++k : "\\" === o.charAt(0) && (o = +o.substring(1)) && (o <= k ? d[o] = -1 : a[g] = h(o))
            }
            for (g =
                1; g < d.length; ++g) - 1 === d[g] && (d[g] = ++j);
            for (k = g = 0; g < c; ++g) o = a[g], o === "(" ? (++k, d[k] || (a[g] = "(?:")) : "\\" === o.charAt(0) && (o = +o.substring(1)) && o <= k && (a[g] = "\\" + d[o]);
            for (g = 0; g < c; ++g) "^" === a[g] && "^" !== a[g + 1] && (a[g] = "");
            if (f.ignoreCase && F)
                for (g = 0; g < c; ++g) o = a[g], f = o.charAt(0), o.length >= 2 && f === "[" ? a[g] = b(o) : f !== "\\" && (a[g] = o.replace(/[A-Za-z]/g, function(a) {
                    a = a.charCodeAt(0);
                    return "[" + String.fromCharCode(a & -33, a | 32) + "]"
                }));
            return a.join("")
        }
        for (var j = 0, F = !1, l = !1, I = 0, c = a.length; I < c; ++I) {
            var p = a[I];
            if (p.ignoreCase) l = !0;
            else if (/[a-z]/i.test(p.source.replace(/\\u[\da-f]{4}|\\x[\da-f]{2}|\\[^UXux]/gi, ""))) {
                F = !0;
                l = !1;
                break
            }
        }
        for (var i = {
                b: 8,
                t: 9,
                n: 10,
                v: 11,
                f: 12,
                r: 13
            }, q = [], I = 0, c = a.length; I < c; ++I) {
            p = a[I];
            if (p.global || p.multiline) throw Error("" + p);
            q.push("(?:" + e(p) + ")")
        }
        return RegExp(q.join("|"), l ? "gi" : "g")
    }

    function m(a, d) {
        function h(a) {
            var c = a.nodeType;
            if (c == 1) {
                if (!b.test(a.className)) {
                    for (c = a.firstChild; c; c = c.nextSibling) h(c);
                    c = a.nodeName.toLowerCase();
                    if ("br" === c || "li" === c) e[l] = "\n", F[l << 1] = j++, F[l++ << 1 | 1] = a
                }
            } else if (c ==
                3 || c == 4) c = a.nodeValue, c.length && (c = d ? c.replace(/\r\n?/g, "\n") : c.replace(/[\t\n\r ]+/g, " "), e[l] = c, F[l << 1] = j, j += c.length, F[l++ << 1 | 1] = a)
        }
        var b = /(?:^|\s)nocode(?:\s|$)/,
            e = [],
            j = 0,

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/prettify.js:468,481
prettyPrintOne: D.prettyPrintOne = function(a, d, g) {
    var b = document.createElement("div");
    b.innerHTML = "<pre>" + a + "</pre>";
    b = b.firstChild;
    g && J(b, g, !0);
    K({
        h: d,
        j: g,
        c: b,
        i: 1
    });
    return b.innerHTML
},
prettyPrint: D.prettyPrint = function(a, d) {

../checkbox.io/public_html/scripts/run_prettify.js:568,581
prettyPrintOne: function(a, d, e) {
    var b = document.createElement("div");
    b.innerHTML = "<pre>" + a + "</pre>";
    b = b.firstChild;
    e && z(b, e, !0);
    D({
        h: d,
        j: e,
        c: b,
        i: 1
    });
    return b.innerHTML
},
prettyPrint: e = e = function(a, d) {

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/prettify.js:481,554
    prettyPrint: D.prettyPrint = function(a, d) {
        function g() {
            for (var b = D.PR_SHOULD_USE_CONTINUATION ? c.now() + 250 : Infinity; i < p.length && c.now() < b; i++) {
                for (var d = p[i], j = h, k = d; k = k.previousSibling;) {
                    var m = k.nodeType,
                        o = (m === 7 || m === 8) && k.nodeValue;
                    if (o ? !/^\??prettify\b/.test(o) : m !== 3 || /\S/.test(k.nodeValue)) break;
                    if (o) {
                        j = {};
                        o.replace(/\b(\w+)=([\w%+\-.:]+)/g, function(a, b, c) {
                            j[b] = c
                        });
                        break
                    }
                }
                k = d.className;
                if ((j !== h || e.test(k)) && !v.test(k)) {
                    m = !1;
                    for (o = d.parentNode; o; o = o.parentNode)
                        if (f.test(o.tagName) &&
                            o.className && e.test(o.className)) {
                            m = !0;
                            break
                        } if (!m) {
                        d.className += " prettyprinted";
                        m = j.lang;
                        if (!m) {
                            var m = k.match(n),
                                y;
                            if (!m && (y = U(d)) && t.test(y.tagName)) m = y.className.match(n);
                            m && (m = m[1])
                        }
                        if (w.test(d.tagName)) o = 1;
                        else var o = d.currentStyle,
                            u = s.defaultView,
                            o = (o = o ? o.whiteSpace : u && u.getComputedStyle ? u.getComputedStyle(d, q).getPropertyValue("white-space") : 0) && "pre" === o.substring(0, 3);
                        u = j.linenums;
                        if (!(u = u === "true" || +u)) u = (u = k.match(/\blinenums\b(?::(\d+))?/)) ? u[1] && u[1].length ? +u[1] : !0 : !1;
                        u && J(d, u, o);
                        r = {
                            h: m,
                            c: d,
                            j: u,
                            i: o
                        };
                        K(r)
                    }
                }
            }
            i < p.length ? setTimeout(g, 250) : "function" === typeof a && a()
        }
        for (var b = d || document.body, s = b.ownerDocument || document, b = [b.getElementsByTagName("pre"), b.getElementsByTagName("code"), b.getElementsByTagName("xmp")], p = [], m = 0; m < b.length; ++m)
            for (var j = 0, k = b[m].length; j < k; ++j) p.push(b[m][j]);
        var b = q,
            c = Date;
        c.now || (c = {
            now: function() {
                return +new Date
            }
        });
        var i = 0,
            r, n = /\blang(?:uage)?-([\w.]+)(?!\S)/,
            e = /\bprettyprint\b/,
            v = /\bprettyprinted\b/,
            w = /pre|xmp/i,
            t = /^code$/i,
            f = /^(?:pre|code|xmp)$/i,
            h = {};
        g()
    }
};
typeof define === "function" && define.amd && define("google-code-prettify", [], function() {
    return Y
})

../checkbox.io/public_html/scripts/run_prettify.js:581,655
    prettyPrint: e = e = function(a, d) {
        function e() {
            for (var b = V.PR_SHOULD_USE_CONTINUATION ? c.now() + 250 : Infinity; p < j.length && c.now() < b; p++) {
                for (var d = j[p], m = k, l = d; l = l.previousSibling;) {
                    var n = l.nodeType,
                        s = (n === 7 || n === 8) && l.nodeValue;
                    if (s ? !/^\??prettify\b/.test(s) : n !== 3 || /\S/.test(l.nodeValue)) break;
                    if (s) {
                        m = {};
                        s.replace(/\b(\w+)=([\w%+\-.:]+)/g, function(a, b, c) {
                            m[b] = c
                        });
                        break
                    }
                }
                l = d.className;
                if ((m !== k || f.test(l)) && !w.test(l)) {
                    n = !1;
                    for (s = d.parentNode; s; s = s.parentNode)
                        if (g.test(s.tagName) && s.className && f.test(s.className)) {
                            n = !0;
                            break
                        } if (!n) {
                        d.className += " prettyprinted";
                        n = m.lang;
                        if (!n) {
                            var n = l.match(q),
                                A;
                            if (!n && (A = x(d)) && u.test(A.tagName)) n = A.className.match(q);
                            n && (n = n[1])
                        }
                        if (y.test(d.tagName)) s = 1;
                        else var s = d.currentStyle,
                            v = i.defaultView,
                            s = (s = s ? s.whiteSpace : v && v.getComputedStyle ? v.getComputedStyle(d, r).getPropertyValue("white-space") : 0) && "pre" === s.substring(0, 3);
                        v = m.linenums;
                        if (!(v = v === "true" || +v)) v = (v = l.match(/\blinenums\b(?::(\d+))?/)) ? v[1] && v[1].length ? +v[1] : !0 : !1;
                        v && z(d, v, s);
                        t = {
                            h: n,
                            c: d,
                            j: v,
                            i: s
                        };
                        D(t)
                    }
                }
            }
            p < j.length ?
                P(e, 250) : "function" === typeof a && a()
        }
        for (var b = d || document.body, i = b.ownerDocument || document, b = [b.getElementsByTagName("pre"), b.getElementsByTagName("code"), b.getElementsByTagName("xmp")], j = [], m = 0; m < b.length; ++m)
            for (var l = 0, n = b[m].length; l < n; ++l) j.push(b[m][l]);
        var b = r,
            c = Date;
        c.now || (c = {
            now: function() {
                return +new Date
            }
        });
        var p = 0,
            t, q = /\blang(?:uage)?-([\w.]+)(?!\S)/,
            f = /\bprettyprint\b/,
            w = /\bprettyprinted\b/,
            y = /pre|xmp/i,
            u = /^code$/i,
            g = /^(?:pre|code|xmp)$/i,
            k = {};
        e()
    }
};
typeof define === "function" && define.amd &&
    define("google-code-prettify", [], function() {
        return X
    })

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/scripts/purl.js:229,240
    return typeof param !== 'undefined' ? this.data.param.fragment[param] : this.data.param.fragment;
},

// return path segments
segment: function(seg) {
    if (typeof seg === 'undefined') {
        return this.data.seg.path;
    } else {
        seg = seg < 0 ? this.data.seg.path.length + seg : seg - 1; // negative segments count from the end
        return this.data.seg.path[seg];
    }
},

../checkbox.io/public_html/scripts/purl.js:238,250
        return this.data.seg.path[seg];
    }
},

// return fragment segments
fsegment: function(seg) {
    if (typeof seg === 'undefined') {
        return this.data.seg.fragment;
    } else {
        seg = seg < 0 ? this.data.seg.fragment.length + seg : seg - 1; // negative segments count from the end
        return this.data.seg.fragment[seg];
    }
}

------------------------------------------------------------

Match - 2 instances

../checkbox.io/public_html/studies/study.js:229,304
var answers = [];
$('div[data-question]').each(function() {
    var kind = $(this).data('kind');
    var question = $(this).data('question');
    //console.log(  question + ":" + kind );
    if (kind == 'text') {
        var text = $(this).find('input[type="text"]');
        answers.push({
            question: question,
            kind: kind,
            answer: text.val()
        });
    }
    if (kind == 'textarea') {
        var textarea = $(this).find('textarea');
        answers.push({
            question: question,
            kind: kind,
            answer: textarea.val()
        });
    }
    if (kind == 'singlechoice') {
        var radio = $(this).find("input[type='radio']:checked");
        answers.push({
            question: question,
            kind: kind,
            answer: radio.val()
        });
    }
    if (kind == 'multichoice') {
        var ans = $(this).find("input:checkbox")
            .filter(function() {
                return !this.disabled && this.checked && this.value;
            })
            .map(function() {
                var check = $(this);
                return check.attr('value');
            });

        answers.push({
            question: question,
            kind: kind,
            answer: $.makeArray(ans)
        });
    }
    if (kind == 'singlechoicetable') {
        var ans = {};
        $(this).find("input[type='radio']:checked")
            .each(function() {
                ans[this.name] = this.value;
            });
        answers.push({
            question: question,
            kind: kind,
            answer: ans
        });
    }
    if (kind == 'multichoicetable') {
        var ans = {};
        $(this).find("input[type='checkbox']:checked")
            .each(function() {
                if (!ans.hasOwnProperty(this.name)) {
                    ans[this.name] = [];
                }
                ans[this.name].push(this.value);
            });
        answers.push({
            question: question,
            kind: kind,
            answer: ans
        });
    }

});

return answers;

../checkbox.io/public_html/surveys/surveys.js:133,208
var answers = [];
$('div[data-question]').each(function() {
    var kind = $(this).data('kind');
    var question = $(this).data('question');
    //console.log(  question + ":" + kind );
    if (kind == 'text') {
        var text = $(this).find('input[type="text"]');
        answers.push({
            question: question,
            kind: kind,
            answer: text.val()
        });
    }
    if (kind == 'textarea') {
        var textarea = $(this).find('textarea');
        answers.push({
            question: question,
            kind: kind,
            answer: textarea.val()
        });
    }
    if (kind == 'singlechoice') {
        var radio = $(this).find("input[type='radio']:checked");
        answers.push({
            question: question,
            kind: kind,
            answer: radio.val()
        });
    }
    if (kind == 'multichoice') {
        var ans = $(this).find("input:checkbox")
            .filter(function() {
                return !this.disabled && this.checked && this.value;
            })
            .map(function() {
                var check = $(this);
                return check.attr('value');
            });

        answers.push({
            question: question,
            kind: kind,
            answer: $.makeArray(ans)
        });
    }
    if (kind == 'singlechoicetable') {
        var ans = {};
        $(this).find("input[type='radio']:checked")
            .each(function() {
                ans[this.name] = this.value;
            });
        answers.push({
            question: question,
            kind: kind,
            answer: ans
        });
    }
    if (kind == 'multichoicetable') {
        var ans = {};
        $(this).find("input[type='checkbox']:checked")
            .each(function() {
                if (!ans.hasOwnProperty(this.name)) {
                    ans[this.name] = [];
                }
                ans[this.name].push(this.value);
            });
        answers.push({
            question: question,
            kind: kind,
            answer: ans
        });
    }

});

return answers;

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/admin.js:171,207
                        'studyId': study._id
                    }).toArray(function(err, items) {
                        console.log(err);

                        var pool = _.uniq(items, function(item, key, a) {
                            return item.email;
                        }).filter(function(element, index, array) {
                            try {
                                return element.email && check(element.email).isEmail();
                            } catch (ex) {
                                return false;
                            }
                        });

                        if (pool && pool.length > 0) {
                            // pick random...other fun ways?
                            var winner = pool[Math.floor(Math.random() * pool.length)];
                            res.send({
                                'winner': winner.email
                            });
                        } else {
                            res.send({
                                'winner': 'Error: No valid emails'
                            });
                        }

                    });
                });
            }
        });
    });
};

// TODO: use token of some sort instead of email.
exports.notifyParticipant = function(req, res) {
    var email = req.body.email;
    var kind = req.body.kind;

../checkbox.io/server-side/site/routes/live.js:151,188
                        'surveyId': survey._id
                    }).toArray(function(err, items) {
                        //voteCollection.find({'survey.$id': survey._id }).toArray(function(err, items) {
                        console.log(err);

                        var pool = _.uniq(items, function(item, key, a) {
                            return item.email;
                        }).filter(function(element, index, array) {
                            try {
                                return element.email && check(element.email).isEmail();
                            } catch (ex) {
                                return false;
                            }
                        });

                        if (pool && pool.length > 0) {
                            // pick random...other fun ways?
                            var winner = pool[Math.floor(Math.random() * pool.length)];
                            res.send({
                                'winner': winner.email
                            });
                        } else {
                            res.send({
                                'winner': 'Error: No valid emails'
                            });
                        }

                    });
                });
            }
        });
    });
};

exports.castVote = function(req, res) {

    var surveyId = req.body.surveyId;
    var ip = getClientAddress(req);

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/admin.js:205,219
exports.notifyParticipant = function(req, res) {
    var email = req.body.email;
    var kind = req.body.kind;

    var redeem = "The researcher will follow up with more instructions on how to receive your compensation.";
    if (kind == "AMZN") {
        redeem = "Your amazon gift card will be sent directly from amazon.com.";
    } else if (kind == "SURFACE") {
        redeem = "Your Microsoft surface will be sent as soon as you reply back with your shipping address.";
    } else if (kind == "IPADMINI") {
        redeem = "Your iPad Mini will be sent as soon as you reply back with your shipping address.";
    } else if (kind == "GITHUB") {
        redeem = "Your github swag will be sent as soon as you reply back with your shipping address.";
    } else if (kind == "BROWSERSTACK") {
        redeem = "Your browserstack token will be in another email.";

../checkbox.io/server-side/site/routes/designer.js:175,189
exports.notifyParticipant = function(req, res) {
    var email = req.body.email;
    var kind = req.body.kind;

    var redeem = "The researcher will follow up with more instructions on how to receive your compensation.";
    if (kind == "AMZN") {
        redeem = "Your amazon gift card will be sent directly from amazon.com.";
    } else if (kind == "SURFACE") {
        redeem = "Your Microsoft surface will be sent as soon as you reply back with your shipping address.";
    } else if (kind == "IPADMINI") {
        redeem = "Your iPad Mini will be sent as soon as you reply back with your shipping address.";
    } else if (kind == "GITHUB") {
        redeem = "Your github swag will be sent as soon as you reply back with your shipping address.";
    } else if (kind == "BROWSERSTACK") {
        redeem = "Your browserstack token will be in another email.";

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/designer.js:82,97
        votes: {
            $sum: 1
        }
    }
}],
function(err, groupResult) {
    console.log(err + ":" + groupResult);

    var voteMap = {};
    var result = {
        surveys: []
    };
    for (var i = 0; i < groupResult.length; i++) {
        var g = groupResult[i];
        if (g._id != null) {
            voteMap[g._id] = g.votes;

../checkbox.io/server-side/site/routes/study.js:31,46
        votes: {
            $sum: 1
        }
    }
}],
function(err, groupResult) {
    console.log(err + ":" + groupResult);

    var voteMap = {};
    var result = {
        studies: []
    };
    for (var i = 0; i < groupResult.length; i++) {
        var g = groupResult[i];
        if (g._id != null) {
            voteMap[g._id] = g.votes;

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/designer.js:97,112
        voteMap[g._id] = g.votes;
    }
}

for (var i = 0; i < surveyItems.length; i++) {
    var s = surveyItems[i];
    if (voteMap[s._id]) {
        var study = {
            id: s._id,
            votes: voteMap[s._id],
            name: s.name,
            status: s.status,
            goal: s.goal,
            awardKind: s.awardKind,
            awardDescription: s.awardDescription,
            description: s.description

../checkbox.io/server-side/site/routes/study.js:50,63
console.log(JSON.stringify(voteMap));

for (var i = 0; i < studyItems.length; i++) {
    var s = studyItems[i];
    if (voteMap[s._id]) {
        var study = {
            id: s._id,
            votes: voteMap[s._id],
            name: s.name,
            status: s.status,
            goal: s.goal,
            awards: s.awards,
            studyKind: s.studyKind,
            link: s.publicLink,

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/live.js:104,136
        req.connection.remoteAddress;
};

exports.status = function(req, res) {
    var surveyId = new ObjectID(req.query.surveyId);
    var ip = getClientAddress(req);
    var fingerprint = req.query.fingerprint;


    db.collection('votes', function(err, collection) {
        collection.find({
            //'survey.$id': surveyId, 
            surveyId: surveyId,
            ip: ip,
            fingerprint: fingerprint
        }).toArray(
            function(err, items) {
                if (items && items.length > 0) {
                    res.send({
                        status: "voted",
                        items: items
                    });
                } else {
                    res.send({
                        status: "ok"
                    });
                }
            });
    });
}

exports.pickParticipant = function(req, res) {
    var token = req.params.token;

../checkbox.io/server-side/site/routes/study.js:121,157
                votes: items.length
            });
        });
    });
};


exports.voteStatus = function(req, res) {
    var studyId = new ObjectID(req.query.studyId);
    var ip = getClientAddress(req);
    var fingerprint = req.query.fingerprint;


    db.collection('votes', function(err, collection) {
        collection.find({
            studyId: studyId,
            ip: ip,
            fingerprint: fingerprint
        }).toArray(
            function(err, items) {
                if (items && items.length > 0) {
                    res.send({
                        status: "voted",
                        items: items
                    });
                } else {
                    res.send({
                        status: "ok"
                    });
                }
            });
    });
}

exports.submitVote = function(req, res) {

    var studyId = req.body.studyId;

------------------------------------------------------------

Match - 2 instances

../checkbox.io/server-side/site/routes/studyModel.js:32,51
    self.invitecode = incoming.invitecode;
};

SurveyModel = function(incoming, token) {
    var self = this;
    StudyBase.call(this, incoming);

    self.markdown = incoming.markdown;
    self.token = token;

    self.adminLink = "/studies/admin/?token=" + token;

    self.setPublicLink = function(id) {
        self.publicLink = "/studies/?id=" + id;
    };


    self.getMessage = function() {
        return {
            text: "Your survey has been created.\n" +

../checkbox.io/server-side/site/routes/studyModel.js:66,84
exports.SurveyModel = SurveyModel;

DataStudyModel = function(incoming, token) {
    var self = this;
    StudyBase.call(this, incoming);

    self.markdown = incoming.markdown;
    self.token = token;

    self.adminLink = "/studies/admin/?token=" + token;

    self.setPublicLink = function(id) {
        self.publicLink = "/studies/?id=" + id;
    };


    self.getMessage = function() {
        return {
            text: "Your data study has been created.\n" +

22 matches found across 29 files
