---
# tasks file for kubernetes

- hosts: localhost
  become: yes
  environment:
    KOPS_CLUSTER_NAME: jubeen.k8s.local
    KOPS_STATE_STORE: s3://kops-jubeen
  tasks:
    - name: install apt dependencies
      apt:
        name: ['git', 'python-pip', 'curl', 'snapd']
        state: installed
        update_cache: true
        cache_valid_time: 500000

    - name: install pip dependencies
      pip:
        name: awscli

    - name: Install kubectl
      shell: snap install kubectl --classic

    - name: "Verify that the repository exists"
      stat:
        path: /usr/local/bin/kops
      register: repo_verify

    - name: install kubectl
      shell: |
          curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
          chmod +x kops-linux-amd64
          sudo mv kops-linux-amd64 /usr/local/bin/kops
      args:
        chdir: /home/ubuntu/ # "{{ ansible_env.HOME }}"
      when: repo_verify.stat.exists == False 


    - name: Including variables.yml
      include_vars:
        file: ../defaults/variables.yml

    - name: Configuring AWS
      shell: |
             aws configure set aws_access_key_id "{{access_key_id}}"
             aws configure set aws_secret_access_key "{{secret_access_key}}"
             aws configure set default.region "{{aws_az}}"


    - name: Create an AWS S3 bucket for kops to persist its state
      shell: |
        aws s3api create-bucket --bucket kops-jubeen --region us-east-1

    - name: Enable versioning for the above S3 bucket
      shell: |
        aws s3api put-bucket-versioning --bucket kops-jubeen --versioning-configuration Status=Enabled

    - name: "Verify that the repository exists"
      stat:
        path: /home/ubuntu/.ssh/id_rsa.pub
      register: repo_verify
    
    - name: Gnerate key
      shell: |
        ssh-keygen -N '' -f /home/ubuntu/.ssh/id_rsa; export KOPS_STATE_STORE=s3://kops-jubeen/
      when: repo_verify.stat.exists == False

    - name: Check if Kubernetes cluster exists or not
      shell: |
        kops describe secrets --name=jubeen.k8s.local
      register: clusterExists
      ignore_errors: yes

    - name: Create a Kubernetes cluster definition using kops      
      shell: |
        kops create cluster --name=jubeen.k8s.local --node-count=3 --node-size=t2.micro --master-size=t2.micro --zones=us-east-1a --ssh-public-key=/home/ubuntu/.ssh/id_rsa.pub --state=s3://kops-jubeen
      when: clusterExists.stderr_lines[1] is defined and clusterExists.stderr_lines[1].find('\"jubeen.k8s.local\" not found') != -1

    - name: Create a Kubernetes cluster actually using kops      
      shell: |
        kops update cluster --name=jubeen.k8s.local --yes --state=s3://kops-jubeen
      when: clusterExists.stderr_lines[1] is defined and clusterExists.stderr_lines[1].find('\"jubeen.k8s.local\" not found') != -1 

    - name: Validate the cluster
      shell: |
        kops validate cluster --state=s3://kops-jubeen
      register: result
      until: result.stdout.find("is ready") != -1
      retries: 150
      delay: 30

    - name: Deploy Checkbox on K8s cluster
      shell: |
        kubectl apply -f checkbox.yml
        kubectl expose deployment nginx-deployment --type=LoadBalancer --name=load-balancer
        kubectl get services
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true     

    - name: Exposing nginx deployment
      shell: |
        kubectl expose deployment nginx-deployment --type=LoadBalancer --name=load-balancer
        kubectl get services
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true   

    - name: Register Service deployment
      shell: |
        kubectl get services
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true   

    - name: Deploy kubernetes dashboard
      shell: |
         kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying heapster
      shell: |
         kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/heapster.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying InfluxDB
      shell: |
         kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/influxdb/influxdb.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true
    
    - name: Configuring access control
      shell: |
         kubectl apply -f https://raw.githubusercontent.com/kubernetes/heapster/master/deploy/kube-config/rbac/heapster-rbac.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploy admin service config file
      shell: |
         kubectl apply -f eks-admin-service-account.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Getting admin password
      shell: |
         kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep eks-admin | awk '{print $1}')
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Getting admin password
      shell: |
         kops get secrets kube --type secret -oplaintext --state=s3://kops-jubeen
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true


    - name: Deploying namespace
      shell: |
         kubectl apply -f namespace.yml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Configuring Role based access control
      shell: |
         kubectl apply -f prometheus-rbac.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying prometheus-configuration file
      shell: |
         kubectl apply -f prometheus-config.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying prometheus-deploy file
      shell: |
         kubectl apply -f prometheus-deploy.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying prometheus-service file
      shell: |
         sudo kubectl apply -f prometheus-svc.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying grafana configuration file
      shell: |
         kubectl apply -f grafana.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying node-exporter file to collect information from nodes
      shell: |
         kubectl apply -f node-exporter.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Deploying configuration file
      shell: |
         kubectl apply -f state-metrics-deploy.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Configuring Role Based Access control
      shell: |
         kubectl apply -f state-metrics-rbac.yaml
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

    - name: Exposing grafana to external IP
      shell: |
         kubectl expose deployment grafana --type=LoadBalancer --namespace=monitoring
      args:
        chdir: "{{home_path}}/roles/kubernetes/files/"
      ignore_errors: true

# /api/v1/namespaces/kube-system/services/https:kubernetes-dashboard:/proxy/#!/login
# sudo kops delete cluster jubeen.k8s.local --state=s3://kops-jubeen --yes

#sudo kubectl apply -f namespace.yml
#sudo kubectl apply -f prometheus-rbac.yaml
#sudo kubectl apply -f prometheus-config.yaml
#sudo kubectl apply -f prometheus-deploy.yaml
#sudo kubectl apply -f prometheus-svc.yaml
#sudo kubectl apply -f grafana.yaml
# sudo kubectl apply -f node-exporter.yaml
# kubectl apply -f state-metrics-deploy.yaml
# kubectl apply -f state-metrics-rbac.yaml
#sudo kubectl expose deployment grafana --type=LoadBalancer --namespace=monitoring
#sudo kubectl get svc -n monitoring